// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ROOT
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  role          UserRole  @default(USER)
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("user")
}

model Account {
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_token")
}

model WhatsApp {
  id                  String            @id @default(cuid())
  name                String
  apiKey              String            @unique @default(uuid()) @map("api_key")
  reachReconnectLimit Boolean           @default(false) @map("reach_reconnect_limit")
  isActive            Boolean           @default(true) @map("is_active")
  sessions            WhatsAppSession[]

  @@map("whatsapp")
}

model WhatsAppSession {
  id         String   @id @default(cuid())
  whatsAppId String   @map("whatsapp_id")
  whatsApp   WhatsApp @relation(fields: [whatsAppId], references: [id])
  data       String   @db.Text

  @@unique([id, whatsAppId], map: "whatsapp_session_id_whatsapp_id")
  @@index([id, whatsAppId])
  @@map("whatsapp_session")
}

model Contact {
  id                  String   @id @default(cuid())
  name                String?
  countryCode         String   @map("country_code")
  phoneNumber         String   @unique @map("phone_number")
  nationalNumber      String?  @map("national_number")
  internationalNumber String?  @map("international_number")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@map("contact")
}

model Broadcast {
  id           String    @id @default(cuid())
  toContactIds String[]  @map("to_contact_ids")
  message      String
  rawMedia     String?   @map("raw_media")
  status       String?   @default("pending")
  scheduleTime DateTime? @map("schedule_time")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@map("broadcast")
}
